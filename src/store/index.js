// redux

/**
 * Redux 主要解决的问题是 js 应用中的状态管理。
 * 在大型的单页应用中，状态（state）会随用户操作和数据变化而不断变化，而这些状态分散在各个组件中，使得状态的管理变得复杂。
 * Redux提供了一个集中式的状态管理方案，是的状态的变化变得可预测和可控。
 */

/**
 * 优点：
 * 1.状态管理集中化，使得状态的变化变得可预测和可控。
 * 2.Redux 的状态存储只读，只能通过派发（dispatch）动作（action）来改变，是状态的变化更加清晰和可追踪。
 * 3.Redux 提供了中间件接口，可以方便的使用各种中间件来增强 Redux 的功能，如处理异步操作、打印日志等。
 * 4.Redux 有大量的社区支持和丰富的插件，可以方便的扩展其功能。
 */

/**
 * 缺点：
 * 1.Redux 的使用有一定的学习成本，需要理解其工作原理和一些概念，如纯函数、动作、中间件等。
 * 2.对于一些简单的应用，使用 Redux 可能会显得过于复杂，增加了开发的难度。
 * 3.Redux 的代码冗余度较高，需要编写大量的样板代码。
 */
